@* Remove this section if you are using bundling *@
@using WebMatrix.WebData;
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script type="text/javascript">
        function onFirstTimeChange()
        {
            var check = document.getElementById("firstTime");
            location.href = "Login?init=" + (check.checked ? "true" : "false");
        };
    </script>
}

@{
    Layout     = "~/_SiteLayout.cshtml";
    Page.Title = "Log in";

    // If already logged-in, just go to MyMusic
    if (WebSecurity.IsAuthenticated)
    {
        Response.Redirect("~/MyMusic");
        return;
    }

    // Initialize general page variables
    var studentid  = "";
    var password   = "";
    var rememberMe = true;
    var firstTime  = Request.QueryString["init"].AsBool(false);

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) { returnUrl = Href("~/MyMusic"); }

    // Set up validation
    Validation.RequireField("studentid", Locale.Messages["ErrorUUN"]);

    Validation.Add("studentid", Validator.Regex(Website.UUNRegex,
                Locale.Messages["ErrorUUN"]));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();

        studentid  = Request.Form["studentid"];
        password   = Request.Form["password"];
        rememberMe = "on".Equals(Request.Form["rememberMe"]);
        firstTime  = "on".Equals(Request.Form["firstTime"]);

        // Manage external logins by removing the leading 'v'
        if (studentid.StartsWith("v") || studentid.StartsWith("V")) {
            studentid = studentid.Remove(0, 1);
        }


        if (!firstTime)
        {
            Validation.RequireField("password", Locale.Messages["ErrorNoPass"]);
            Validation.Add("password",
                Validator.StringLength(
                    maxLength: Int32.MaxValue,
                    minLength: 6,
                    errorMessage: Locale.Messages["ErrorPassLen"]));
        }

        bool isFirstLogIn = !WebSecurity.UserExists(studentid);

        if (Validation.IsValid("studentid") &&
            (firstTime || Validation.IsValid("password")))
        {
            // Check if account has been locked out
            if (!isFirstLogIn && WebSecurity.GetPasswordFailuresSinceLastSuccess(studentid) > 4
            && WebSecurity.GetLastPasswordFailureDate(studentid).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Check if we have the user in the database
            if (UserHelper.IsMember(studentid))
            {
                // Check if they've logged in before
                if (!isFirstLogIn)
                {
                    if (firstTime)
                    {
                        Validation.AddFormError("We have a record of you logging in previously. "
                            + "Please use the password you set to continue.");
                    }
                    else if (WebSecurity.Login(studentid, password, rememberMe))
                    {
                        Context.RedirectLocal(returnUrl);
                        return;
                    }
                    else { ModelState.AddFormError(Locale.Messages["ErrorLogin"]); }
                }
                else
                {
                    Context.RedirectLocal(Href("~/Account/Confirm?sid="+studentid));
                    return;
                }
            }
            else if (isFirstLogIn && firstTime) {
                ModelState.AddFormError(Locale.Messages["ErrorMember"]);
            }
            else { ModelState.AddFormError(Locale.Messages["ErrorLogin"]); }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
</hgroup>

<section id="loginForm">
    <h2>@Locale.Messages["PromptLogin"]</h2>
    <form method="post" id="form">
        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary(Locale.Messages["ErrorValid"], excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>Log in to Your Account</legend>
            <ol>
                <li class="email">
                    <label for="studentid" @if (!ModelState.IsValidField("studentid"))
                                           { <text> class="error-label" </text> }>Student Number</label>

                    <input type="text" id="studentid" name="studentid" value="@studentid" @Validation.For("studentid") />
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("studentid")
                </li>
                <li class="password">
                    @if (!firstTime) { 
                        <label for="password" id="passwordtxt" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password</label>
                        <input type="password" id="password" name="password" @Validation.For("password")/>
                        @* Write any password validation errors to the page *@
                        @Html.ValidationMessage("password")
                    }
                </li>
                <li class="remember-me">
                    <input type="checkbox" id="firstTime" name="firstTime" checked="@firstTime" onchange="onFirstTimeChange()" />
                    <label class="checkbox" for="firstTime">This is my first time here.</label>
                </li>
                <li class="remember-me">
                    <input type="checkbox" id="rememberMe" name="rememberMe" checked="@rememberMe" />
                    <label class="checkbox" for="rememberMe">Save my login for next time.</label>
                </li>
                
            </ol>
            <input type="submit" value="Log in" />
        </fieldset>
    </form>
    <p>
        <a href="mailto:@Website.Webmaster">Problem? Click here to request help.</a>
    </p>
</section>